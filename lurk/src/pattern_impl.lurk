!(load "pattern.lurk")

;; pattern_e_fresh :: evar -> pattern -> bool
!(defrec pattern_e_fresh
    (lambda (evar pattern)
        (let ((instr_u32    (get :inst pattern))
              (p_id         (get :id pattern))
              (p_e_fresh    (get :e_fresh pattern))
              (p_left       (get :left pattern))
              (p_right      (get :right pattern))
              (p_subpattern (get :subpattern pattern))
              (p_plug       (get :plug pattern)))
            (if (= instr_u32 2) ; Evar
                (not (= evar p_id))
                (if (= instr_u32 3) ; SVar
                    t
                    (if (= instr_u32 4) ; Symbol
                        t
                        (if (= instr_u32 9) ; MetaVar
                            (contains evar p_e_fresh)
                            (if (= instr_u32 5) ; Implies
                                (and (pattern_e_fresh evar p_left)
                                     (pattern_e_fresh evar p_right))
                                (if (= instr_u32 6) ; App
                                    (and (pattern_e_fresh evar p_left)
                                         (pattern_e_fresh evar p_right))
                                    (if (= instr_u32 8) ; Exists
                                        (or (= evar p_id)
                                            (pattern_e_fresh evar p_subpattern))
                                        (if (= instr_u32 7) ; Mu
                                            (pattern_e_fresh evar p_subpattern)
                                            (if (= instr_u32 10) ; ESubst
                                                (if (= evar p_id)
                                                    (pattern_e_fresh evar p_plug)
                                                    (and (pattern_e_fresh evar p_subpattern)
                                                         (pattern_e_fresh evar p_plug)))
                                                (if (= instr_u32 11) ; SSubst
                                                    (and (pattern_e_fresh evar p_subpattern)
                                                         (pattern_e_fresh evar p_plug))
                                                    nil)))))))))))))
                                                    
;; pattern_s_fresh :: svar -> pattern -> bool
!(defrec pattern_s_fresh
    (lambda (svar pattern)
        (let ((instr_u32    (get :inst pattern))
              (p_id         (get :id pattern))
              (p_s_fresh    (get :s_fresh pattern))
              (p_left       (get :left pattern))
              (p_right      (get :right pattern))
              (p_subpattern (get :subpattern pattern))
              (p_plug       (get :plug pattern)))
            (if (= instr_u32 2) ; Evar
                t
                (if (= instr_u32 3) ; SVar
                    (not (= svar p_id))
                    (if (= instr_u32 4) ; Symbol
                        t
                        (if (= instr_u32 9) ; MetaVar
                            (contains svar p_s_fresh)
                            (if (= instr_u32 5) ; Implies
                                (and (pattern_s_fresh svar p_left)
                                     (pattern_s_fresh svar p_right))
                                (if (= instr_u32 6) ; App
                                    (and (pattern_s_fresh svar p_left)
                                         (pattern_s_fresh svar p_right))
                                    (if (= instr_u32 8) ; Exists
                                        (pattern_s_fresh svar p_subpattern)
                                        (if (= instr_u32 7) ; Mu
                                            (or (= svar p_id)
                                                (pattern_s_fresh svar p_subpattern))
                                            (if (= instr_u32 10) ; ESubst
                                                (and (pattern_s_fresh svar p_subpattern)
                                                     (pattern_s_fresh svar p_plug))
                                                (if (= instr_u32 11) ; SSubst
                                                    (if (= svar p_id)
                                                        (pattern_s_fresh svar p_plug)
                                                        (and (pattern_s_fresh svar p_subpattern)
                                                             (pattern_s_fresh svar p_plug)))
                                                    nil)))))))))))))

!(defrec pattern_positivity
    (lambda (func_name svar pattern)
        (let ((instr_u32    (get :inst pattern))
              (p_id         (get :id pattern))
              (p_s_fresh    (get :s_fresh pattern))
              (p_left       (get :left pattern))
              (p_right      (get :right pattern))
              (p_positive   (get :positive pattern))
              (p_negative   (get :negative pattern))
              (p_subpattern (get :subpattern pattern))
              (p_plug       (get :plug pattern)))
            (if (eq :positive func_name)
                ; pattern_positive
                (if (= instr_u32 2) ; Evar
                    t
                    (if (= instr_u32 3) ; SVar
                        t
                        (if (= instr_u32 4) ; Symbol
                            t
                            (if (= instr_u32 9) ; MetaVar
                                (or (contains svar p_positive)
                                    (pattern_s_fresh svar pattern))
                                (if (= instr_u32 5) ; Implies
                                    (and (pattern_positivity :negative svar p_left)
                                         (pattern_positivity :positive svar p_right))
                                    (if (= instr_u32 6) ; App
                                        (and (pattern_positivity :positive svar p_left)
                                             (pattern_positivity :positive svar p_right))
                                        (if (= instr_u32 8) ; Exists
                                            (pattern_positivity :positive svar p_subpattern)
                                            (if (= instr_u32 7) ; Mu
                                                (or (= svar p_id)
                                                    (pattern_positivity :positive svar p_subpattern))
                                                (if (= instr_u32 10) ; ESubst
                                                    (and (pattern_positivity :positive svar p_subpattern)
                                                         (pattern_s_fresh svar p_plug))
                                                    (if (= instr_u32 11) ; SSubst
                                                        (let ((plug_positive_svar (or (pattern_s_fresh svar p_plug)
                                                                                      (or (and (pattern_positivity :positive p_id p_subpattern)
                                                                                               (pattern_positivity :positive svar p_plug))
                                                                                          (and (pattern_positivity :negative p_id p_subpattern)
                                                                                               (pattern_positivity :negative svar p_plug))))))
                                                            (if (= svar p_id)
                                                                plug_positive_svar
                                                                (and (pattern_positivity :positive svar p_subpattern)
                                                                     plug_positive_svar)))
                                                        nil))))))))))
                ; pattern_negative
                (if (= instr_u32 2) ; Evar
                    t
                    (if (= instr_u32 3) ; SVar
                        (not (= svar p_id))
                        (if (= instr_u32 4) ; Symbol
                            t
                            (if (= instr_u32 9) ; MetaVar
                                (or (contains svar p_negative)
                                    (pattern_s_fresh svar pattern))
                                (if (= instr_u32 5) ; Implies
                                    (and (pattern_positivity :positive svar p_left)
                                         (pattern_positivity :negative svar p_right))
                                    (if (= instr_u32 6) ; App
                                        (and (pattern_positivity :negative svar p_left)
                                             (pattern_positivity :negative svar p_right))
                                        (if (= instr_u32 8) ; Exists
                                            (pattern_positivity :negative svar p_subpattern)
                                            (if (= instr_u32 7) ; Mu
                                                (or (= svar p_id)
                                                    (pattern_positivity :negative svar p_subpattern))
                                                (if (= instr_u32 10) ; ESubst
                                                    (and (pattern_positivity :negative svar p_subpattern)
                                                         (pattern_s_fresh svar p_plug))
                                                    (if (= instr_u32 11) ; SSubst
                                                        (let ((plug_negative_svar (or (pattern_s_fresh svar p_plug)
                                                                                      (or (and (pattern_positivity :positive p_id p_subpattern)
                                                                                               (pattern_positivity :negative svar p_plug))
                                                                                          (and (pattern_positivity :negative p_id p_subpattern)
                                                                                               (pattern_positivity :positive svar p_plug))))))
                                                            (if (= svar p_id)
                                                                plug_negative_svar
                                                                (and (pattern_positivity :negative svar p_subpattern)
                                                                     plug_positive_svar)))
                                                        nil))))))))))))))

;; pattern_positive :: svar -> pattern -> bool
!(def pattern_positive
    (lambda (svar pattern)
        (pattern_positivity :positive svar pattern)))

;; pattern_negative :: svar -> pattern -> bool
!(def pattern_negative
    (lambda (svar pattern)
        (pattern_positivity :negative svar pattern)))

; pattern_app_ctx_hole :: evar -> pattern -> bool
!(defrec pattern_app_ctx_hole
    (lambda (evar pattern)
        (let ((instr_u32       (get :inst pattern))
              (p_id            (get :id pattern))
              (p_left          (get :left pattern))
              (p_right         (get :right pattern))
              (p_subpattern    (get :subpattern pattern))
              (p_plug          (get :plug pattern))
              (p_app_ctx_holes (get :app_ctx_holes pattern)))
            (if (= instr_u32 2) ; Evar
                (= p_id evar)
                (if (= instr_u32 3) ; Svar
                    nil
                    (if (= instr_u32 4) ; Symbol
                       nil
                       (if (= instr_u32 5) ; Implies
                          nil
                          (if (= instr_u32 6) ; App
                              (or (and (pattern_app_ctx_hole evar p_left)
                                       (pattern_e_fresh evar p_right))
                                  (and (pattern_e_fresh evar p_left)
                                       (pattern_app_ctx_hole evar p_right))
                              )
                              (if (= instr_u32 7) ; Mu
                                  nil
                                  (if (= instr_u32 8) ; Exists
                                      nil
                                      (if (= instr_u32 9) ; MetaVar
                                          (contains evar p_app_ctx_holes)
                                          (if (= instr_u32 10) ; ESubst
                                              (if (= p_id evar)
                                                  (and (pattern_ctx_hole evar p_subpattern)
                                                       (pattern_ctx_hole evar p_plug)
                                                  )
                                                  (or (and (pattern_ctx_hole evar p_subpattern)
                                                           (pattern_e_fresh evar p_plug)
                                                      )
                                                      (and (and (pattern_app_ctx_hole p_id p_subpattern)
                                                                (pattern_app_ctx_hole evar p_plug)
                                                           )
                                                           (pattern_e_fresh evar p_subpattern)
                                                      )
                                                  )
                                              )
                                              (if (= instr_u32 11) ; SSubst unimplemented
                                                  nil
                                                  nil)))))))))))))

;; is_redundant_subst :: pattern -> bool
!(def is_redundant_subst
    (lambda (pattern)
        (let ((instr_u32    (get :inst pattern))
              (p_id         (get :id pattern))
              (p_subpattern (get :subpattern pattern))
              (p_plug       (get :plug pattern)))
            (if (= instr_u32 10) ; ESubst
                (or (eq (evar p_id) p_plug)
                    (pattern_e_fresh p_id p_subpattern))
                (if (= instr_u32 11) ; SSubst
                    (or (eq (svar p_id) p_plug)
                        (pattern_s_fresh p_id p_subpattern))
                    nil)))))

;; pattern_well_formed :: pattern -> bool
!(def pattern_well_formed
    (lambda (pattern)
        (let ((instr_u32       (get :inst pattern))
              (p_id            (get :id pattern))
              (p_e_fresh       (get :e_fresh pattern))
              (p_subpattern    (get :subpattern pattern))
              (p_app_ctx_holes (get :app_ctx_holes pattern)))
            (if (= instr_u32 9) ; MetaVar
                (not (containsElement p_app_ctx_holes p_e_fresh))
                (if (= instr_u32 7) ; Mu
                    (pattern_positive p_id p_subpattern)
                    (if (= instr_u32 10) ; ESbust
                        (let ((subpattern_inst (get :inst p_subpattern)))
                            (and (not (is_redundant_subst pattern))
                                 (or (= subpattern_inst 9)
                                     (or (= subpattern_inst 10)
                                         (= subpattern_inst 11)))))
                        (if (= instr_u32 11) ; SSubst
                            (let ((subpattern_inst (get :inst p_subpattern)))
                                (and (not (is_redundant_subst pattern))
                                     (or (= subpattern_inst 9)
                                         (or (= subpattern_inst 10)
                                             (= subpattern_inst 11)))))
                            nil)))))))
